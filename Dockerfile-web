# Dockerfile-web
# 使用官方 Python 镜像作为基础镜像，选择一个轻量级版本
FROM python:3.10-slim-buster

# 设置工作目录
WORKDIR /app

# 复制 requirements.txt 到工作目录
COPY requirements.txt .

# 安装 Python 依赖
# 使用 --no-cache-dir 避免在镜像中保留 pip 缓存
# 使用 --upgrade pip 确保 pip 是最新版本
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# 复制整个项目代码到容器的 /app 目录
# 注意：这里复制的是整个项目根目录的内容，包括 config/, web/, dispatcher/ 等
COPY . .

# 暴露 Flask 应用监听的端口
# 这个端口应该与 config/settings.py 中 FLASK_PORT 的值一致
EXPOSE 8000

# 定义容器启动时执行的命令
# 使用 waitress 作为生产级 WSGI 服务器来运行 Flask 应用
# web.app:create_app 指向 web/app.py 文件中的 create_app 函数
CMD ["waitress-serve", "--listen=0.0.0.0:8000", "web.app:create_app()"]

# 提示：如果您的 Flask 应用入口是 web/app.py 并且直接运行 app.run()，
# 那么 CMD 可能是 ["python", "web/app.py"]。
# 但对于生产环境，推荐使用 waitress。